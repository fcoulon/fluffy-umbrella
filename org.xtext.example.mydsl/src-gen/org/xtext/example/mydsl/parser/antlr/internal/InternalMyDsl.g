/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "rRoot";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulerRoot
entryRulerRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRRootRule()); }
	iv_rulerRoot=rulerRoot
	{ $current=$iv_rulerRoot.current; }
	EOF;

// Rule rRoot
rulerRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='behavior'
		{
			newLeafNode(otherlv_0, grammarAccess.getRRootAccess().getBehaviorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRRootAccess().getBehaviourQualifiedParserRuleCall_1_0());
				}
				lv_behaviour_1_0=ruleQualified
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRRootRule());
					}
					set(
						$current,
						"behaviour",
						lv_behaviour_1_0,
						"org.xtext.example.mydsl.MyDsl.Qualified");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRRootAccess().getSyntaxesRImportSyntaxParserRuleCall_2_0());
				}
				lv_syntaxes_2_0=rulerImportSyntax
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRRootRule());
					}
					add(
						$current,
						"syntaxes",
						lv_syntaxes_2_0,
						"org.xtext.example.mydsl.MyDsl.rImportSyntax");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRRootAccess().getSemanticsRImportSemanticParserRuleCall_3_0());
				}
				lv_semantics_3_0=rulerImportSemantic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRRootRule());
					}
					add(
						$current,
						"semantics",
						lv_semantics_3_0,
						"org.xtext.example.mydsl.MyDsl.rImportSemantic");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRRootAccess().getServicesRImportServiceParserRuleCall_4_0());
				}
				lv_services_4_0=rulerImportService
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRRootRule());
					}
					add(
						$current,
						"services",
						lv_services_4_0,
						"org.xtext.example.mydsl.MyDsl.rImportService");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRRootAccess().getXtendedClassesRClassParserRuleCall_5_0());
				}
				lv_xtendedClasses_5_0=rulerClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRRootRule());
					}
					add(
						$current,
						"xtendedClasses",
						lv_xtendedClasses_5_0,
						"org.xtext.example.mydsl.MyDsl.rClass");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleQualified
entryRuleQualified returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedRule()); }
	iv_ruleQualified=ruleQualified
	{ $current=$iv_ruleQualified.current.getText(); }
	EOF;

// Rule Qualified
ruleQualified returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			$current.merge(this_Ident_0);
		}
		{
			newLeafNode(this_Ident_0, grammarAccess.getQualifiedAccess().getIdentTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedAccess().getFullStopKeyword_1_0());
			}
			this_Ident_2=RULE_IDENT
			{
				$current.merge(this_Ident_2);
			}
			{
				newLeafNode(this_Ident_2, grammarAccess.getQualifiedAccess().getIdentTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRulerImportSyntax
entryRulerImportSyntax returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRImportSyntaxRule()); }
	iv_rulerImportSyntax=rulerImportSyntax
	{ $current=$iv_rulerImportSyntax.current; }
	EOF;

// Rule rImportSyntax
rulerImportSyntax returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getRImportSyntaxAccess().getImportKeyword_0());
		}
		otherlv_1='syntax'
		{
			newLeafNode(otherlv_1, grammarAccess.getRImportSyntaxAccess().getSyntaxKeyword_1());
		}
		(
			(
				lv_uri_2_0=RULE_STRING
				{
					newLeafNode(lv_uri_2_0, grammarAccess.getRImportSyntaxAccess().getUriSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRImportSyntaxRule());
					}
					setWithLastConsumed(
						$current,
						"uri",
						lv_uri_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getRImportSyntaxAccess().getAsKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_IDENT
				{
					newLeafNode(lv_name_4_0, grammarAccess.getRImportSyntaxAccess().getNameIdentTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRImportSyntaxRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRImportSyntaxAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulerImportSemantic
entryRulerImportSemantic returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRImportSemanticRule()); }
	iv_rulerImportSemantic=rulerImportSemantic
	{ $current=$iv_rulerImportSemantic.current.getText(); }
	EOF;

// Rule rImportSemantic
rulerImportSemantic returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getImportKeyword_0());
		}
		kw='semantic'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getSemanticKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRImportSemanticAccess().getQualifiedParserRuleCall_2());
		}
		this_Qualified_2=ruleQualified
		{
			$current.merge(this_Qualified_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='as'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getAsKeyword_3());
		}
		this_Ident_4=RULE_IDENT
		{
			$current.merge(this_Ident_4);
		}
		{
			newLeafNode(this_Ident_4, grammarAccess.getRImportSemanticAccess().getIdentTerminalRuleCall_4());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getLeftParenthesisKeyword_5());
		}
		this_Ident_6=RULE_IDENT
		{
			$current.merge(this_Ident_6);
		}
		{
			newLeafNode(this_Ident_6, grammarAccess.getRImportSemanticAccess().getIdentTerminalRuleCall_6());
		}
		kw='=>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getEqualsSignGreaterThanSignKeyword_7());
		}
		this_Ident_8=RULE_IDENT
		{
			$current.merge(this_Ident_8);
		}
		{
			newLeafNode(this_Ident_8, grammarAccess.getRImportSemanticAccess().getIdentTerminalRuleCall_8());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getRightParenthesisKeyword_9());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportSemanticAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRulerImportService
entryRulerImportService returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRImportServiceRule()); }
	iv_rulerImportService=rulerImportService
	{ $current=$iv_rulerImportService.current.getText(); }
	EOF;

// Rule rImportService
rulerImportService returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportServiceAccess().getImportKeyword_0());
		}
		kw='service'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportServiceAccess().getServiceKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRImportServiceAccess().getQualifiedParserRuleCall_2());
		}
		this_Qualified_2=ruleQualified
		{
			$current.merge(this_Qualified_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportServiceAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerClass
entryRulerClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRClassRule()); }
	iv_rulerClass=rulerClass
	{ $current=$iv_rulerClass.current; }
	EOF;

// Rule rClass
rulerClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getRClassAccess().getClassKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRClassRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRClassAccess().getSyntaxRImportSyntaxCrossReference_1_0());
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getRClassAccess().getFullStopKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_IDENT
				{
					newLeafNode(lv_name_3_0, grammarAccess.getRClassAccess().getNameIdentTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getRClassAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRClassAccess().getAttributesRAttributeParserRuleCall_5_0());
				}
				lv_attributes_5_0=rulerAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRClassRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_5_0,
						"org.xtext.example.mydsl.MyDsl.rAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRClassAccess().getOperationsROperationParserRuleCall_6_0());
				}
				lv_operations_6_0=rulerOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRClassRule());
					}
					add(
						$current,
						"operations",
						lv_operations_6_0,
						"org.xtext.example.mydsl.MyDsl.rOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getRClassAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRulerOperation
entryRulerOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getROperationRule()); }
	iv_rulerOperation=rulerOperation
	{ $current=$iv_rulerOperation.current; }
	EOF;

// Rule rOperation
rulerOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getROperationAccess().getRTagParserRuleCall_0());
			}
			rulerTag
			{
				afterParserOrEnumRuleCall();
			}
		)*
		(
			otherlv_1='def'
			{
				newLeafNode(otherlv_1, grammarAccess.getROperationAccess().getDefKeyword_1_0());
			}
			    |
			otherlv_2='override'
			{
				newLeafNode(otherlv_2, grammarAccess.getROperationAccess().getOverrideKeyword_1_1());
			}
		)
		(
			(
				lv_type_3_0=RULE_IDENT
				{
					newLeafNode(lv_type_3_0, grammarAccess.getROperationAccess().getTypeIdentTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getROperationRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_3_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		(
			(
				lv_name_4_0=RULE_IDENT
				{
					newLeafNode(lv_name_4_0, grammarAccess.getROperationAccess().getNameIdentTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getROperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getROperationAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getROperationAccess().getParamListRParametersParserRuleCall_5_0());
				}
				lv_paramList_6_0=rulerParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROperationRule());
					}
					add(
						$current,
						"paramList",
						lv_paramList_6_0,
						"org.xtext.example.mydsl.MyDsl.rParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getROperationAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getROperationAccess().getBodyRBlockParserRuleCall_7_0());
				}
				lv_body_8_0=rulerBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROperationRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.example.mydsl.MyDsl.rBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerTag
entryRulerTag returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRTagRule()); }
	iv_rulerTag=rulerTag
	{ $current=$iv_rulerTag.current.getText(); }
	EOF;

// Rule rTag
rulerTag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='@'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRTagAccess().getCommercialAtKeyword_0());
		}
		this_Ident_1=RULE_IDENT
		{
			$current.merge(this_Ident_1);
		}
		{
			newLeafNode(this_Ident_1, grammarAccess.getRTagAccess().getIdentTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulerParameters
entryRulerParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRParametersRule()); }
	iv_rulerParameters=rulerParameters
	{ $current=$iv_rulerParameters.current; }
	EOF;

// Rule rParameters
rulerParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_0_0());
				}
				lv_params_0_0=rulerVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRParametersRule());
					}
					add(
						$current,
						"params",
						lv_params_0_0,
						"org.xtext.example.mydsl.MyDsl.rVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getRParametersAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_1_1_0());
					}
					lv_params_2_0=rulerVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRParametersRule());
						}
						add(
							$current,
							"params",
							lv_params_2_0,
							"org.xtext.example.mydsl.MyDsl.rVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulerVariable
entryRulerVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRVariableRule()); }
	iv_rulerVariable=rulerVariable
	{ $current=$iv_rulerVariable.current; }
	EOF;

// Rule rVariable
rulerVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0=RULE_IDENT
				{
					newLeafNode(lv_type_0_0, grammarAccess.getRVariableAccess().getTypeIdentTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRVariableRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRVariableAccess().getNameIdentTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
	)
;

// Entry rule entryRulerAttribute
entryRulerAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRAttributeRule()); }
	iv_rulerAttribute=rulerAttribute
	{ $current=$iv_rulerAttribute.current; }
	EOF;

// Rule rAttribute
rulerAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0=RULE_IDENT
				{
					newLeafNode(lv_type_0_0, grammarAccess.getRAttributeAccess().getTypeIdentTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRAttributeAccess().getNameIdentTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.MyDsl.Ident");
				}
			)
		)
		(
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getRAttributeAccess().getColonEqualsSignKeyword_2_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getRAttributeAccess().getExpressionParserRuleCall_2_1());
			}
			ruleexpression
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRAttributeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerStatement
entryRulerStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRStatementRule()); }
	iv_rulerStatement=rulerStatement
	{ $current=$iv_rulerStatement.current.getText(); }
	EOF;

// Rule rStatement
rulerStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRStatementAccess().getRVarDeclParserRuleCall_0());
		}
		this_rVarDecl_0=rulerVarDecl
		{
			$current.merge(this_rVarDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRStatementAccess().getRAssignParserRuleCall_1());
		}
		this_rAssign_1=rulerAssign
		{
			$current.merge(this_rAssign_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRStatementAccess().getRForEachParserRuleCall_2());
		}
		this_rForEach_2=rulerForEach
		{
			$current.merge(this_rForEach_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRStatementAccess().getRWhileParserRuleCall_3());
		}
		this_rWhile_3=rulerWhile
		{
			$current.merge(this_rWhile_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRStatementAccess().getRIfParserRuleCall_4());
		}
		this_rIf_4=rulerIf
		{
			$current.merge(this_rIf_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRStatementAccess().getRExpressionParserRuleCall_5());
		}
		this_rExpression_5=rulerExpression
		{
			$current.merge(this_rExpression_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerVarDecl
entryRulerVarDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRVarDeclRule()); }
	iv_rulerVarDecl=rulerVarDecl
	{ $current=$iv_rulerVarDecl.current.getText(); }
	EOF;

// Rule rVarDecl
rulerVarDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			$current.merge(this_Ident_0);
		}
		{
			newLeafNode(this_Ident_0, grammarAccess.getRVarDeclAccess().getIdentTerminalRuleCall_0());
		}
		this_Ident_1=RULE_IDENT
		{
			$current.merge(this_Ident_1);
		}
		{
			newLeafNode(this_Ident_1, grammarAccess.getRVarDeclAccess().getIdentTerminalRuleCall_1());
		}
		(
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRVarDeclAccess().getColonEqualsSignKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getRVarDeclAccess().getExpressionParserRuleCall_2_1());
			}
			this_expression_3=ruleexpression
			{
				$current.merge(this_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRVarDeclAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerAssign
entryRulerAssign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRAssignRule()); }
	iv_rulerAssign=rulerAssign
	{ $current=$iv_rulerAssign.current.getText(); }
	EOF;

// Rule rAssign
rulerAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRAssignAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRAssignAccess().getColonEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRAssignAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current.merge(this_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRAssignAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerForEach
entryRulerForEach returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRForEachRule()); }
	iv_rulerForEach=rulerForEach
	{ $current=$iv_rulerForEach.current.getText(); }
	EOF;

// Rule rForEach
rulerForEach returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='for'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRForEachAccess().getForKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRForEachAccess().getLeftParenthesisKeyword_1());
		}
		this_Ident_2=RULE_IDENT
		{
			$current.merge(this_Ident_2);
		}
		{
			newLeafNode(this_Ident_2, grammarAccess.getRForEachAccess().getIdentTerminalRuleCall_2());
		}
		kw='in'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRForEachAccess().getInKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getRForEachAccess().getRCollectionParserRuleCall_4());
		}
		this_rCollection_4=rulerCollection
		{
			$current.merge(this_rCollection_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRForEachAccess().getRightParenthesisKeyword_5());
		}
		{
			newCompositeNode(grammarAccess.getRForEachAccess().getRBlockParserRuleCall_6());
		}
		this_rBlock_6=rulerBlock
		{
			$current.merge(this_rBlock_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerCollection
entryRulerCollection returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRCollectionRule()); }
	iv_rulerCollection=rulerCollection
	{ $current=$iv_rulerCollection.current.getText(); }
	EOF;

// Rule rCollection
rulerCollection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRCollectionAccess().getLeftSquareBracketKeyword_0_0());
			}
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_1());
			}
			kw='..'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRCollectionAccess().getFullStopFullStopKeyword_0_2());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_3());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRCollectionAccess().getRightSquareBracketKeyword_0_4());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getRCollectionAccess().getExpressionParserRuleCall_1());
		}
		this_expression_5=ruleexpression
		{
			$current.merge(this_expression_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerBlock
entryRulerBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRBlockRule()); }
	iv_rulerBlock=rulerBlock
	{ $current=$iv_rulerBlock.current.getText(); }
	EOF;

// Rule rBlock
rulerBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getRBlockAccess().getRStatementParserRuleCall_1_0());
			}
			this_rStatement_1=rulerStatement
			{
				$current.merge(this_rStatement_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getRBlockAccess().getRStatementParserRuleCall_1_1());
				}
				this_rStatement_2=rulerStatement
				{
					$current.merge(this_rStatement_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
		)?
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRulerIf
entryRulerIf returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRIfRule()); }
	iv_rulerIf=rulerIf
	{ $current=$iv_rulerIf.current.getText(); }
	EOF;

// Rule rIf
rulerIf returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRIfAccess().getIfKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRIfAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRIfAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current.merge(this_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRIfAccess().getRightParenthesisKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getRIfAccess().getRBlockParserRuleCall_4());
		}
		this_rBlock_4=rulerBlock
		{
			$current.merge(this_rBlock_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='else'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRIfAccess().getElseKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getRIfAccess().getRBlockParserRuleCall_5_1());
			}
			this_rBlock_6=rulerBlock
			{
				$current.merge(this_rBlock_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulerWhile
entryRulerWhile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRWhileRule()); }
	iv_rulerWhile=rulerWhile
	{ $current=$iv_rulerWhile.current.getText(); }
	EOF;

// Rule rWhile
rulerWhile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='while'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRWhileAccess().getWhileKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRWhileAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRWhileAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current.merge(this_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRWhileAccess().getRightParenthesisKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getRWhileAccess().getRBlockParserRuleCall_4());
		}
		this_rBlock_4=rulerBlock
		{
			$current.merge(this_rBlock_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerExpression
entryRulerExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRExpressionRule()); }
	iv_rulerExpression=rulerExpression
	{ $current=$iv_rulerExpression.current.getText(); }
	EOF;

// Rule rExpression
rulerExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRExpressionAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRExpressionAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current.getText(); }
	EOF;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNonLeftRecExpressionParserRuleCall_0());
		}
		this_nonLeftRecExpression_0=rulenonLeftRecExpression
		{
			$current.merge(this_nonLeftRecExpression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getRecExpressionParserRuleCall_1());
			}
			this_recExpression_1=rulerecExpression
			{
				$current.merge(this_recExpression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulerecExpression
entryRulerecExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRecExpressionRule()); }
	iv_rulerecExpression=rulerecExpression
	{ $current=$iv_rulerecExpression.current.getText(); }
	EOF;

// Rule recExpression
rulerecExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRecExpressionAccess().getNavigationSegmentParserRuleCall_0_0());
			}
			this_navigationSegment_0=rulenavigationSegment
			{
				$current.merge(this_navigationSegment_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				this_MultOp_1=RULE_MULTOP
				{
					$current.merge(this_MultOp_1);
				}
				{
					newLeafNode(this_MultOp_1, grammarAccess.getRecExpressionAccess().getMultOpTerminalRuleCall_0_1_0());
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_1_1());
				}
				this_expression_2=ruleexpression
				{
					$current.merge(this_expression_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getAddOpParserRuleCall_0_2_0());
				}
				this_addOp_3=ruleaddOp
				{
					$current.merge(this_addOp_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_2_1());
				}
				this_expression_4=ruleexpression
				{
					$current.merge(this_expression_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getCompOpParserRuleCall_0_3_0());
				}
				this_compOp_5=rulecompOp
				{
					$current.merge(this_compOp_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_3_1());
				}
				this_expression_6=ruleexpression
				{
					$current.merge(this_expression_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='and'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0());
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_4_1());
				}
				this_expression_8=ruleexpression
				{
					$current.merge(this_expression_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='or'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0());
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_5_1());
				}
				this_expression_10=ruleexpression
				{
					$current.merge(this_expression_10);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='xor'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0());
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_6_1());
				}
				this_expression_12=ruleexpression
				{
					$current.merge(this_expression_12);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='implies'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0());
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_7_1());
				}
				this_expression_14=ruleexpression
				{
					$current.merge(this_expression_14);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getRecExpressionAccess().getRecExpressionParserRuleCall_1());
			}
			this_recExpression_15=rulerecExpression
			{
				$current.merge(this_recExpression_15);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulenavigationSegment
entryRulenavigationSegment returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNavigationSegmentRule()); }
	iv_rulenavigationSegment=rulenavigationSegment
	{ $current=$iv_rulenavigationSegment.current.getText(); }
	EOF;

// Rule navigationSegment
rulenavigationSegment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_0_0());
			}
			this_Ident_1=RULE_IDENT
			{
				$current.merge(this_Ident_1);
			}
			{
				newLeafNode(this_Ident_1, grammarAccess.getNavigationSegmentAccess().getIdentTerminalRuleCall_0_1());
			}
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getNavigationSegmentAccess().getCallExpParserRuleCall_1_1());
			}
			this_callExp_3=rulecallExp
			{
				$current.merge(this_callExp_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='->'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNavigationSegmentAccess().getHyphenMinusGreaterThanSignKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getNavigationSegmentAccess().getCallExpParserRuleCall_2_1());
			}
			this_callExp_5=rulecallExp
			{
				$current.merge(this_callExp_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulenonLeftRecExpression
entryRulenonLeftRecExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNonLeftRecExpressionRule()); }
	iv_rulenonLeftRecExpression=rulenonLeftRecExpression
	{ $current=$iv_rulenonLeftRecExpression.current.getText(); }
	EOF;

// Rule nonLeftRecExpression
rulenonLeftRecExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getNotKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_0_1());
			}
			this_expression_1=ruleexpression
			{
				$current.merge(this_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getHyphenMinusKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_1_1());
			}
			this_expression_3=ruleexpression
			{
				$current.merge(this_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_Ident_4=RULE_IDENT
		{
			$current.merge(this_Ident_4);
		}
		{
			newLeafNode(this_Ident_4, grammarAccess.getNonLeftRecExpressionAccess().getIdentTerminalRuleCall_2());
		}
		    |
		{
			newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getLiteralParserRuleCall_3());
		}
		this_literal_5=ruleliteral
		{
			$current.merge(this_literal_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_4_1());
			}
			this_expression_7=ruleexpression
			{
				$current.merge(this_expression_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getRightParenthesisKeyword_4_2());
			}
		)
		    |
		(
			kw='if'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getIfKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_1());
			}
			this_expression_10=ruleexpression
			{
				$current.merge(this_expression_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='then'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getThenKeyword_5_2());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_3());
			}
			this_expression_12=ruleexpression
			{
				$current.merge(this_expression_12);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='else'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getElseKeyword_5_4());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_5());
			}
			this_expression_14=ruleexpression
			{
				$current.merge(this_expression_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='endif'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getEndifKeyword_5_6());
			}
		)
		    |
		(
			kw='let'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getLetKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getBindingParserRuleCall_6_1());
			}
			this_binding_17=rulebinding
			{
				$current.merge(this_binding_17);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getCommaKeyword_6_2_0());
				}
				{
					newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getBindingParserRuleCall_6_2_1());
				}
				this_binding_19=rulebinding
				{
					$current.merge(this_binding_19);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='in'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNonLeftRecExpressionAccess().getInKeyword_6_3());
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_6_4());
			}
			this_expression_21=ruleexpression
			{
				$current.merge(this_expression_21);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulebinding
entryRulebinding returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_rulebinding=rulebinding
	{ $current=$iv_rulebinding.current.getText(); }
	EOF;

// Rule binding
rulebinding returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			$current.merge(this_Ident_0);
		}
		{
			newLeafNode(this_Ident_0, grammarAccess.getBindingAccess().getIdentTerminalRuleCall_0());
		}
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBindingAccess().getColonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getBindingAccess().getTypeLiteralParserRuleCall_1_1());
			}
			this_typeLiteral_2=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBindingAccess().getEqualsSignKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getBindingAccess().getExpressionParserRuleCall_3());
		}
		this_expression_4=ruleexpression
		{
			$current.merge(this_expression_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleaddOp
entryRuleaddOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAddOpRule()); }
	iv_ruleaddOp=ruleaddOp
	{ $current=$iv_ruleaddOp.current.getText(); }
	EOF;

// Rule addOp
ruleaddOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddOpAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRulecompOp
entryRulecompOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompOpRule()); }
	iv_rulecompOp=rulecompOp
	{ $current=$iv_rulecompOp.current.getText(); }
	EOF;

// Rule compOp
rulecompOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getLessThanSignEqualsSignKeyword_0());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getGreaterThanSignEqualsSignKeyword_1());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getExclamationMarkEqualsSignKeyword_2());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getLessThanSignGreaterThanSignKeyword_3());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getEqualsSignKeyword_4());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getEqualsSignEqualsSignKeyword_5());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getLessThanSignKeyword_6());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getGreaterThanSignKeyword_7());
		}
	)
;

// Entry rule entryRulecallExp
entryRulecallExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCallExpRule()); }
	iv_rulecallExp=rulecallExp
	{ $current=$iv_rulecallExp.current.getText(); }
	EOF;

// Rule callExp
rulecallExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getCollectionIteratorParserRuleCall_0_0());
			}
			this_collectionIterator_0=rulecollectionIterator
			{
				$current.merge(this_collectionIterator_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getVariableDefinitionParserRuleCall_0_2());
			}
			this_variableDefinition_2=rulevariableDefinition
			{
				$current.merge(this_variableDefinition_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getLambdaExpressionParserRuleCall_0_3());
			}
			this_lambdaExpression_3=rulelambdaExpression
			{
				$current.merge(this_lambdaExpression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCallExpAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			this_Ident_5=RULE_IDENT
			{
				$current.merge(this_Ident_5);
			}
			{
				newLeafNode(this_Ident_5, grammarAccess.getCallExpAccess().getIdentTerminalRuleCall_1_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getExpressionSequenceParserRuleCall_1_2());
			}
			this_expressionSequence_7=ruleexpressionSequence
			{
				$current.merge(this_expressionSequence_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCallExpAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRulelambdaExpression
entryRulelambdaExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLambdaExpressionRule()); }
	iv_rulelambdaExpression=rulelambdaExpression
	{ $current=$iv_rulelambdaExpression.current.getText(); }
	EOF;

// Rule lambdaExpression
rulelambdaExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getLambdaExpressionAccess().getExpressionParserRuleCall());
	}
	this_expression_0=ruleexpression
	{
		$current.merge(this_expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulecollectionIterator
entryRulecollectionIterator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCollectionIteratorRule()); }
	iv_rulecollectionIterator=rulecollectionIterator
	{ $current=$iv_rulecollectionIterator.current.getText(); }
	EOF;

// Rule collectionIterator
rulecollectionIterator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getSelectKeyword_0());
		}
		    |
		kw='reject'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getRejectKeyword_1());
		}
		    |
		kw='collect'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getCollectKeyword_2());
		}
		    |
		kw='any'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getAnyKeyword_3());
		}
		    |
		kw='exists'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getExistsKeyword_4());
		}
		    |
		kw='forAll'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getForAllKeyword_5());
		}
		    |
		kw='isUnique'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getIsUniqueKeyword_6());
		}
		    |
		kw='one'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getOneKeyword_7());
		}
		    |
		kw='sortedBy'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getSortedByKeyword_8());
		}
		    |
		kw='closure'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getClosureKeyword_9());
		}
	)
;

// Entry rule entryRuleexpressionSequence
entryRuleexpressionSequence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionSequenceRule()); }
	iv_ruleexpressionSequence=ruleexpressionSequence
	{ $current=$iv_ruleexpressionSequence.current.getText(); }
	EOF;

// Rule expressionSequence
ruleexpressionSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionParserRuleCall_1_1());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)?
;

// Entry rule entryRulevariableDefinition
entryRulevariableDefinition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	iv_rulevariableDefinition=rulevariableDefinition
	{ $current=$iv_rulevariableDefinition.current.getText(); }
	EOF;

// Rule variableDefinition
rulevariableDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			$current.merge(this_Ident_0);
		}
		{
			newLeafNode(this_Ident_0, grammarAccess.getVariableDefinitionAccess().getIdentTerminalRuleCall_0());
		}
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVariableDefinitionAccess().getColonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeLiteralParserRuleCall_1_1());
			}
			this_typeLiteral_2=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableDefinitionAccess().getVerticalLineKeyword_2());
		}
	)
;

// Entry rule entryRuleliteral
entryRuleliteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current.getText(); }
	EOF;

// Rule literal
ruleliteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_Real_2=RULE_REAL
		{
			$current.merge(this_Real_2);
		}
		{
			newLeafNode(this_Real_2, grammarAccess.getLiteralAccess().getRealTerminalRuleCall_2());
		}
		    |
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralAccess().getTrueKeyword_3());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralAccess().getFalseKeyword_4());
		}
		    |
		kw='null'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralAccess().getNullKeyword_5());
		}
		    |
		(
			kw='Sequence{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getSequenceKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_6_1());
			}
			this_expressionSequence_7=ruleexpressionSequence
			{
				$current.merge(this_expressionSequence_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_6_2());
			}
		)
		    |
		(
			kw='OrderedSet{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_7_1());
			}
			this_expressionSequence_10=ruleexpressionSequence
			{
				$current.merge(this_expressionSequence_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_7_2());
			}
		)
		    |
		(
			this_Ident_12=RULE_IDENT
			{
				$current.merge(this_Ident_12);
			}
			{
				newLeafNode(this_Ident_12, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getColonColonKeyword_8_1());
			}
			this_Ident_14=RULE_IDENT
			{
				$current.merge(this_Ident_14);
			}
			{
				newLeafNode(this_Ident_14, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_2());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getColonColonKeyword_8_3());
			}
			this_Ident_16=RULE_IDENT
			{
				$current.merge(this_Ident_16);
			}
			{
				newLeafNode(this_Ident_16, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_4());
			}
		)
		    |
		(
			this_Ident_17=RULE_IDENT
			{
				$current.merge(this_Ident_17);
			}
			{
				newLeafNode(this_Ident_17, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getColonColonKeyword_9_1());
			}
			this_Ident_19=RULE_IDENT
			{
				$current.merge(this_Ident_19);
			}
			{
				newLeafNode(this_Ident_19, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_2());
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralAccess().getColonKeyword_9_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getTypeLiteralParserRuleCall_10());
		}
		this_typeLiteral_21=ruletypeLiteral
		{
			$current.merge(this_typeLiteral_21);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuletypeLiteral
entryRuletypeLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralRule()); }
	iv_ruletypeLiteral=ruletypeLiteral
	{ $current=$iv_ruletypeLiteral.current.getText(); }
	EOF;

// Rule typeLiteral
ruletypeLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getStringKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getIntegerKeyword_1());
		}
		    |
		kw='Real'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRealKeyword_2());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getBooleanKeyword_3());
		}
		    |
		(
			kw='Sequence('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getSequenceKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_4_1());
			}
			this_typeLiteral_5=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_4_2());
			}
		)
		    |
		(
			kw='OrderedSet('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getOrderedSetKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_5_1());
			}
			this_typeLiteral_8=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_5_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_6());
		}
		this_classifierTypeRule_10=ruleclassifierTypeRule
		{
			$current.merge(this_classifierTypeRule_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getLeftCurlyBracketKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_1());
			}
			this_classifierTypeRule_12=ruleclassifierTypeRule
			{
				$current.merge(this_classifierTypeRule_12);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw='|'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_2_0());
				}
				{
					newCompositeNode(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_2_1());
				}
				this_classifierTypeRule_14=ruleclassifierTypeRule
				{
					$current.merge(this_classifierTypeRule_14);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRightCurlyBracketKeyword_7_3());
			}
		)
	)
;

// Entry rule entryRuleclassifierTypeRule
entryRuleclassifierTypeRule returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClassifierTypeRuleRule()); }
	iv_ruleclassifierTypeRule=ruleclassifierTypeRule
	{ $current=$iv_ruleclassifierTypeRule.current.getText(); }
	EOF;

// Rule classifierTypeRule
ruleclassifierTypeRule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_Ident_0=RULE_IDENT
			{
				$current.merge(this_Ident_0);
			}
			{
				newLeafNode(this_Ident_0, grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClassifierTypeRuleAccess().getColonColonKeyword_0_1());
			}
			this_Ident_2=RULE_IDENT
			{
				$current.merge(this_Ident_2);
			}
			{
				newLeafNode(this_Ident_2, grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_2());
			}
		)
		    |
		(
			this_Ident_3=RULE_IDENT
			{
				$current.merge(this_Ident_3);
			}
			{
				newLeafNode(this_Ident_3, grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_1_0());
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClassifierTypeRuleAccess().getColonKeyword_1_1());
			}
		)
	)
;

RULE_MULTOP : ('*'|'/');

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_IDENT : (RULE_LETTER|'_') (RULE_LETTER|'0'..'9'|'_')*;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
